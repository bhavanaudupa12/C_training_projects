#include <stdio.h>
#include <stdlib.h>
#include <string.h>



typedef struct item_node {
	int item_id;
	char name[31];
	int qoh;
	double rate;



	struct item_node* pNext;



} ITEMNODE;



ITEMNODE* item_root = NULL;



void addNode(int id, char* name, int qoh, double rate);
void displayList(ITEMNODE* root);
void deleteList(void);
ITEMNODE* findItem(ITEMNODE* item_root, int code);
void deleteItem(int code);



int main()
{
	displayList(item_root);
	addNode(1, (char*)"Shirts", 100, 11.11);
	displayList(item_root);
	addNode(2, (char*)"Pants", 200, 22.22);
	displayList(item_root);
	addNode(3, (char*)"T-Shirts", 300, 33.33);
	addNode(4, (char*)"Dress", 400, 44.44);
	addNode(5, (char*)"Sandals", 500, 55.55);
	addNode(6, (char*)"Shoes", 600, 66.66);
	displayList(item_root);



	int code;
	printf("Input Item Code to Find: ");
	scanf_s("%d", &code);



	ITEMNODE* itemFound = findItem(item_root, code);



	if (itemFound == NULL)
	{
		printf("ITEM CODE NOT FOUND");
	}
	else
	{
		printf("%d, %s, %d, %lf\n", itemFound->item_id, itemFound->name, itemFound->qoh, itemFound->rate);
	}





	printf("Input Item Code to Delete: ");
	scanf_s("%d", &code);



	deleteItem(code);
	displayList(item_root);







	deleteList();
	displayList(item_root);
}



void deleteItem(int code)
{
	ITEMNODE* pRoot = item_root;
	ITEMNODE* prevNode = NULL;



	while (pRoot != NULL && pRoot->item_id != code)
	{
		prevNode = pRoot;
		pRoot = pRoot->pNext;
	}



	if (pRoot == NULL)
		return;
	if (prevNode == NULL)
	{
		// Deleting the first node in the list
		item_root = pRoot->pNext;
		free((void*)pRoot);
		return;
	}



	prevNode->pNext = pRoot->pNext;
	free((void*)pRoot);
}





ITEMNODE* findItem(ITEMNODE* root, int code)
{
	while (root != NULL)
	{
		if (root->item_id == code)
			break;
		root = root->pNext;
	}



	return root;
}





void deleteList(void)
{
	ITEMNODE* ptr = item_root;
	ITEMNODE* nextItem = NULL;



	while (ptr != NULL)
	{
		nextItem = ptr->pNext;
		free((void*)ptr);
		ptr = nextItem;
	}



	item_root = NULL;



}



void displayList(ITEMNODE* root)
{
	if (root == NULL)
	{
		printf("List is Empty\n");
		return;
	}



	while (root != NULL)
	{
		printf("%d, %s, %d, %lf\n", root->item_id, root->name, root->qoh, root->rate);
		root = root->pNext;
	}



	printf("**END OF LIST **\n\n");



}



void addNode(int id, char* name, int qoh, double rate)
{
	ITEMNODE* nodePtr = (ITEMNODE*)malloc(sizeof(ITEMNODE));



	nodePtr->item_id = id;
	strcpy_s(nodePtr->name, name);
	nodePtr->qoh = qoh;
	nodePtr->rate = rate;



	nodePtr->pNext = NULL;



	if (item_root == NULL)
	{
		// List is empty
		item_root = nodePtr;
		return;
	}



	ITEMNODE* iPtr = item_root;
	while (iPtr->pNext != NULL)
	{
		iPtr = iPtr->pNext;
	}



	iPtr->pNext = nodePtr;
}